package com.tisl.mpl.cockpits.cscockpit.services.impl;import java.util.HashMap;import java.util.HashSet;import java.util.List;import java.util.Locale;import java.util.Map;import java.util.Set;import org.springframework.beans.factory.annotation.Required;import com.tisl.mpl.cockpits.cscockpit.services.ItemModificationHistoryService;import com.tisl.mpl.cockpits.cscockpit.services.ItemModificationInfo;import de.hybris.platform.core.model.ItemModel;import de.hybris.platform.core.model.c2l.LanguageModel;import de.hybris.platform.hmc.model.SavedValuesModel;import de.hybris.platform.jalo.JaloConnection;import de.hybris.platform.jalo.c2l.Language;import de.hybris.platform.servicelayer.exceptions.UnknownIdentifierException;import de.hybris.platform.servicelayer.i18n.CommonI18NService;import de.hybris.platform.servicelayer.i18n.I18NService;import de.hybris.platform.servicelayer.internal.model.impl.ModelValueHistory;import de.hybris.platform.servicelayer.model.ItemModelContext;import de.hybris.platform.servicelayer.model.ItemModelContextImpl;import de.hybris.platform.servicelayer.model.ModelContextUtils;import de.hybris.platform.servicelayer.model.ModelService;import de.hybris.platform.servicelayer.search.FlexibleSearchService;import de.hybris.platform.servicelayer.search.SearchResult;public class DefaultItemModificationHistoryService implements		ItemModificationHistoryService {	private ModelService modelService;	private I18NService i18NService;	private CommonI18NService commonI18NService;	private FlexibleSearchService flexibleSearchService;	public List<SavedValuesModel> getSavedValues(ItemModel item) {		SearchResult<SavedValuesModel> searchResult = this.flexibleSearchService				.search("select {pk} from {SavedValues} where {modifiedItem} = "						+ item.getPk().getLongValue());		return searchResult.getResult();	}	@Required	public void setFlexibleSearchService(			FlexibleSearchService flexibleSearchService) {		this.flexibleSearchService = flexibleSearchService;	}	public ModelService getModelService() {		return this.modelService;	}	@Required	public void setModelService(ModelService modelService) {		this.modelService = modelService;	}	public I18NService getI18NService() {		return this.i18NService;	}	@Required	public void setI18NService(I18NService i18NService) {		this.i18NService = i18NService;	}	public CommonI18NService getCommonI18NService() {		return this.commonI18NService;	}	@Required	public void setCommonI18NService(CommonI18NService commonI18NService) {		this.commonI18NService = commonI18NService;	}	public void logItemModification(ItemModificationInfo modificationInfo) {		logModifications(modificationInfo.getModel(), modificationInfo);	}	private ModelValueHistory getModelValueHistory(ItemModel itemModel) {		ModelValueHistory ret = null;		ItemModelContext itemModelContext = ModelContextUtils				.getItemModelContext(itemModel);		if (itemModelContext != null) {			ret = ((ItemModelContextImpl) itemModelContext).getValueHistory();		}		return ret;	}	public ItemModificationInfo createModificationInfo(ItemModel itemModel) {		ItemModificationInfo info = new ItemModificationInfo(itemModel);		ModelValueHistory modelHistory = getModelValueHistory(itemModel);		if (modelHistory != null) {			boolean isNew = getModelService().isNew(itemModel);			if ((modelHistory.isDirty()) || (isNew)) {				info.setNew(isNew);				ModelService modelService = getModelService();				I18NService i18n = getI18NService();				Set<String> dirtyAttributes = modelHistory.getDirtyAttributes();				for (String attribute : dirtyAttributes) {					info.addEntry(							attribute,							false,							getOriginalValue(itemModel, attribute, modelHistory),							modelService									.getAttributeValue(itemModel, attribute));				}				Map<Locale, Set<String>> localizedDirtyAttributes = modelHistory						.getDirtyLocalizedAttributes();				Map<String, Set<Locale>> reversed = new HashMap<>();				for (Map.Entry<Locale, Set<String>> entry : localizedDirtyAttributes						.entrySet()) {					for (String attribute : entry.getValue()) {						Set<Locale> locales = reversed.get(attribute);						if (locales == null) {							locales = new HashSet<Locale>(1);						}						locales.add((Locale) entry.getKey());						reversed.put(attribute, locales);					}				}				for (Map.Entry<String, Set<Locale>> entry : reversed.entrySet()) {					Locale localeBackup = i18n.getCurrentLocale();					try {						Map<Locale, Object> originalValue = new HashMap<>(entry								.getValue().size());						Map<Locale, Object> modifiedValue = new HashMap<>(entry								.getValue().size());						for (Locale locale : entry.getValue()) {							i18n.setCurrentLocale(locale);							originalValue.put(									locale,									getOriginalValue(itemModel,											(String) entry.getKey(), locale,											modelHistory));							modifiedValue.put(locale, modelService									.getAttributeValue(itemModel,											(String) entry.getKey()));						}						info.addEntry((String) entry.getKey(), true,								originalValue, modifiedValue);					} finally {						i18n.setCurrentLocale(localeBackup);					}				}			}		}		return ((ItemModificationInfo) (ItemModificationInfo) info);	}	protected Object getOriginalValue(ItemModel model, String attribute,			ModelValueHistory history) {		Object value = null;		if ((!(getModelService().isNew(model)))				&& (history.isValueLoaded(attribute))) {			value = history.getOriginalValue(attribute);		}		return value;	}	protected Object getOriginalValue(ItemModel model, String attribute,			Locale locale, ModelValueHistory history) {		Object value = null;		if ((!(getModelService().isNew(model)))				&& (history.isValueLoaded(attribute, locale))) {			value = history.getOriginalValue(attribute, locale);		}		return value;	}	protected void logModifications(ItemModel model,			ItemModificationInfo modificationInfo) {		Map originalValues = new HashMap();		Map modifiedValues = new HashMap();		for (String attribute : modificationInfo.getModifiedAttributes()) {			originalValues.put(					attribute,					toPersistenceLayer(							modificationInfo.getOriginalValue(attribute),							modificationInfo.isLocalized(attribute)));			modifiedValues.put(					attribute,					toPersistenceLayer(							modificationInfo.getModifiedValue(attribute),							modificationInfo.isLocalized(attribute)));		}		if (modifiedValues.isEmpty())			return;		if (modificationInfo.isNew()) {			JaloConnection.getInstance().logItemCreation(model.getPk(),					modifiedValues);		} else if (getModelService().isRemoved(model)) {			JaloConnection.getInstance().logItemRemoval(model.getPk(), false);		} else {			JaloConnection.getInstance().logItemModification(model.getPk(),					modifiedValues, originalValues, false);		}	}	private Object toPersistenceLayer(Object value, boolean localized) {		Object ret = null;		ModelService modelService = getModelService();		if (localized) {			if (value instanceof Map) {				I18NService i18nService = getI18NService();				CommonI18NService commonI18NService = getCommonI18NService();				Map<Locale, Object> locmap = (Map<Locale, Object>) value;				Map wrapped = new HashMap<>();				for (Locale locale : locmap.keySet()) {					Object locval = ((Map) value).get(locale);					LanguageModel language;					try {						language = commonI18NService.getLanguage(i18nService								.getBestMatchingLocale(locale).getLanguage());					} catch (UnknownIdentifierException localUnknownIdentifierException) {						language = commonI18NService.getLanguage(locale								.toString());					}					wrapped.put((Language) modelService.getSource(language),							modelService.toPersistenceLayer(locval));				}				ret = wrapped;			}		} else {			ret = modelService.toPersistenceLayer(value);		}		return ret;	}}